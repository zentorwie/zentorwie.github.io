---
layout: post
title: "LET-IT-GO#00 - LCA+树链剖分+可持久化数据结构 总结"
date: 2014-12-03 21:01:31 +0800
comments: true
categories: ACM-ICPC Algorithm 专题
---

[题目和代码](http://acm.hust.edu.cn/vjudge/contest/view.action?cid=64211#overview)

个人训练的第一个专题，名字叫LET-IT-GO是因为最近很喜欢这首歌-_-

说说收获

###树链剖分
树链剖分基本上搞懂了，也叫做轻重树边剖分，用来解决数的形态不变但点/边权可变的路径权值查询问题。

核心是两个dfs，一个把节点的`父亲`、`重儿子`、`深度`、`大小`的信息都求出来。
另外一个通过优先访问重儿子的方法，建立查询单元（点或边）到线段树下标的映射。由于重链接上面的查询单元在线段树上面都是相邻的，所以可以直接对整一条重链进行修改和查询。又根据定理:`size(v) < size(u)/2`(其中v为u的轻儿子)，一个节点到达根节点的路径，轻边和重链（注意是链）的数量为不超过logN。有了这个性质，查询和修改可以很高效，比如路径修改只需要`O(logNlogN)`。

这个树链剖分还是很好理解的，只是不熟的话做题的时候容易犯一些小错误，比如说查询或者修改的时候忘记了加映射了，或者没有注意点权和边权的区别。这几天是把这些坑都踩了一边，收获蛮大的。

另外这玩意儿玩起来老是要写线段树，如果只是点修改区间查询或者区间修改点查询，还是写BIT好，简单。如果复杂一点还是上线段树吧，比如说区间最值之类的。。


###LCA
LCA，最近公共祖先，Lowest Common Ancestor。没啥难的，主要就两种途径求：
倍增预处理，二分查找。
dfs出欧拉序列然后RMQ一下。（RMQ我一般用ST，好写啊）
Tarjan的LCA算法嘛，没碰，略过了，这个以后遇上必须要O(n)求LCA的问题再学把。

###可持久化线段树
然后就是可持久化线段树了，也就是主席树。
看了三四天，才大概把带修改和不带修改的给看懂了。这结构可以用来求`区间k-th问题`。

这种数据结构利用的是区间可以加减的性质，从左到右把原序列的元素的值加进去，就得到n棵线段树（实际上就是得到了这几颗树的根节点），注意，这些线段树储存但是值的个数统计信息。`第i棵树`里面有从`1时刻`到`i时刻`的信息，如果要得到区间`[L, R]`的信息，就把`R时刻`的树减去`L-1`的树，得到的就是`L时刻`到`R时刻`的统计信息，由于建树的时候是根据从左到右一个时刻一个时刻地加入元素的值，所以现在我们就得到了`[L, R]`这个区间的统计信息。

可持久化线段树这坑有点深，考虑到现阶段的主要任务是拓宽知识面，所以主席树的学习先到这里，以后有时间再补。


------

这次遗留问题下来没过的题：

* HYSBZ-1146 网络管理Network
* SPOJ-COT Count on a tree
* SPOJ-DQUERY D-query
* POJ-2761 Feed the dogs
